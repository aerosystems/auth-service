basePath: /
definitions:
  handlers.CodeRequestBody:
    properties:
      code:
        example: "012345"
        maxLength: 6
        minLength: 6
        type: string
    required:
    - code
    type: object
  handlers.ErrorResponse:
    properties:
      code:
        type: integer
      error: {}
      message:
        type: string
    type: object
  handlers.Response:
    properties:
      data: {}
      message:
        type: string
    type: object
  handlers.TokensResponseBody:
    properties:
      accessToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      refreshToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
    type: object
  handlers.UserRequestBody:
    properties:
      email:
        example: example@gmail.com
        type: string
      password:
        example: P@ssw0rd
        type: string
    required:
    - email
    - password
    type: object
host: gw.verifire.com/auth
info:
  contact:
    name: Artem Kostenko
    url: https://github.com/aerosystems
  description: A mandatory part of any microservice infrastructure of a modern WEB
    application, which is responsible for user authentication and authorization.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Auth Service
  version: 1.0.7
paths:
  /v1/confirm:
    post:
      consumes:
      - application/json
      parameters:
      - description: raw request body
        in: body
        name: code
        required: true
        schema:
          $ref: '#/definitions/handlers.CodeRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: confirm registration/reset password with 6-digit code from email/sms
      tags:
      - auth
  /v1/sign-up:
    post:
      consumes:
      - application/json
      description: |-
        Password should contain:
        - minimum of one small case letter
        - minimum of one upper case letter
        - minimum of one digit
        - minimum of one special character
        - minimum 8 characters length
      parameters:
      - description: raw request body
        in: body
        name: registration
        required: true
        schema:
          $ref: '#/definitions/handlers.UserRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: registration user by credentials
      tags:
      - auth
  /v1/token/validate:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/handlers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: validate token
      tags:
      - api-gateway-special
  /v1/user/login:
    post:
      consumes:
      - application/json
      description: |-
        Password should contain:
        - minimum of one small case letter
        - minimum of one upper case letter
        - minimum of one digit
        - minimum of one special character
        - minimum 8 characters length
        Response contain pair JWT tokens, use /token/refresh for updating them
      parameters:
      - description: raw request body
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/handlers.UserRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.Response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.TokensResponseBody'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: login user by credentials
      tags:
      - auth
  /v1/user/logout:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: logout user
      tags:
      - auth
schemes:
- https
securityDefinitions:
  BearerAuth:
    description: Should contain Access JWT Token, with the Bearer started
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
