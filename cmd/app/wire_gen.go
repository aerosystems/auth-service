// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/aerosystems/auth-service/internal/config"
	"github.com/aerosystems/auth-service/internal/http"
	"github.com/aerosystems/auth-service/internal/infrastructure/rest"
	"github.com/aerosystems/auth-service/internal/models"
	"github.com/aerosystems/auth-service/internal/repository/pg"
	"github.com/aerosystems/auth-service/internal/repository/rpc"
	"github.com/aerosystems/auth-service/internal/usecases"
	"github.com/aerosystems/auth-service/pkg/gorm_postgres"
	"github.com/aerosystems/auth-service/pkg/logger"
	"github.com/aerosystems/auth-service/pkg/redis_client"
	"github.com/aerosystems/auth-service/pkg/rpc_client"
	"github.com/go-redis/redis/v7"
	"github.com/sirupsen/logrus"
	"gorm.io/gorm"
)

// Injectors from wire.go:

//go:generate wire
func InitApp() *App {
	logger := ProvideLogger()
	logrusLogger := ProvideLogrusLogger(logger)
	config := ProvideConfig()
	baseHandler := ProvideBaseHandler(logrusLogger, config)
	client := ProvideRedisClient(logger, config)
	tokenUsecase := ProvideTokenUsecase(client, config)
	entry := ProvideLogrusEntry(logger)
	db := ProvideGormPostgres(entry, config)
	codeRepo := ProvideCodeRepo(db, config)
	userRepo := ProvideUserRepo(db)
	checkmailRepo := ProvideCheckmailRepo(config)
	mailRepo := ProvideMailRepo(config)
	customerRepo := ProvideCustomerRepo(config)
	userUsecase := ProvideUserUsecase(codeRepo, userRepo, checkmailRepo, mailRepo, customerRepo)
	codeUsecase := ProvideCodeUsecase(codeRepo)
	userHandler := ProvideUserHandler(baseHandler, tokenUsecase, userUsecase, codeUsecase)
	tokenHandler := ProvideTokenHandler(baseHandler, tokenUsecase)
	server := ProvideHttpServer(logrusLogger, config, userHandler, tokenHandler)
	app := ProvideApp(logrusLogger, config, server)
	return app
}

func ProvideApp(log *logrus.Logger, cfg *config.Config, httpServer *HttpServer.Server) *App {
	app := NewApp(log, cfg, httpServer)
	return app
}

func ProvideLogger() *logger.Logger {
	loggerLogger := logger.NewLogger()
	return loggerLogger
}

func ProvideConfig() *config.Config {
	configConfig := config.NewConfig()
	return configConfig
}

func ProvideUserHandler(baseHandler *rest.BaseHandler, tokenUsecase rest.TokenUsecase, userUsecase rest.UserUsecase, codeUsecase rest.CodeUsecase) *rest.UserHandler {
	userHandler := rest.NewUserHandler(baseHandler, tokenUsecase, userUsecase, codeUsecase)
	return userHandler
}

func ProvideTokenHandler(baseHandler *rest.BaseHandler, tokenUsecase rest.TokenUsecase) *rest.TokenHandler {
	tokenHandler := rest.NewTokenHandler(baseHandler, tokenUsecase)
	return tokenHandler
}

func ProvideUserUsecase(codeRepo usecases.CodeRepository, userRepo usecases.UserRepository, checkmailRepo usecases.CheckmailRepo, mailRepo usecases.MailRepo, customerRepo usecases.CustomerRepo) *usecases.UserUsecase {
	userUsecase := usecases.NewUserUsecase(codeRepo, userRepo, checkmailRepo, mailRepo, customerRepo)
	return userUsecase
}

func ProvideCodeUsecase(codeRepo usecases.CodeRepository) *usecases.CodeUsecase {
	codeUsecase := usecases.NewCodeUsecase(codeRepo)
	return codeUsecase
}

func ProvideUserRepo(db *gorm.DB) *pg.UserRepo {
	userRepo := pg.NewUserRepo(db)
	return userRepo
}

// wire.go:

func ProvideHttpServer(log *logrus.Logger, cfg *config.Config, userHandler *rest.UserHandler, tokenHandler *rest.TokenHandler) *HttpServer.Server {
	return HttpServer.NewServer(log, cfg.AccessSecret, userHandler, tokenHandler)
}

func ProvideLogrusEntry(log *logger.Logger) *logrus.Entry {
	return logrus.NewEntry(log.Logger)
}

func ProvideLogrusLogger(log *logger.Logger) *logrus.Logger {
	return log.Logger
}

func ProvideGormPostgres(e *logrus.Entry, cfg *config.Config) *gorm.DB {
	db := GormPostgres.NewClient(e, cfg.PostgresDSN)
	if err := db.AutoMigrate(&models.User{}, &models.Code{}); err != nil {
		panic(err)
	}
	return db
}

func ProvideRedisClient(log *logger.Logger, cfg *config.Config) *redis.Client {
	return RedisClient.NewRedisClient(log, cfg.RedisDSN, cfg.RedisPassword)
}

func ProvideBaseHandler(log *logrus.Logger, cfg *config.Config) *rest.BaseHandler {
	return rest.NewBaseHandler(log, cfg.Mode)
}

func ProvideTokenUsecase(redisClient *redis.Client, cfg *config.Config) *usecases.TokenUsecase {
	return usecases.NewTokenUsecase(redisClient, cfg.AccessSecret, cfg.RefreshSecret, cfg.AccessExpMinutes, cfg.RefreshExpMinutes)
}

func ProvideCodeRepo(db *gorm.DB, cfg *config.Config) *pg.CodeRepo {
	return pg.NewCodeRepo(db, cfg.CodeExpMinutes)
}

func ProvideCheckmailRepo(cfg *config.Config) *RpcRepo.CheckmailRepo {
	rpcClient := RpcClient.NewClient("tcp", cfg.CheckmailServiceRPCAddr)
	return RpcRepo.NewCheckmailRepo(rpcClient)
}

func ProvideMailRepo(cfg *config.Config) *RpcRepo.MailRepo {
	rpcClient := RpcClient.NewClient("tcp", cfg.MailServiceRPCAddr)
	return RpcRepo.NewMailRepo(rpcClient)
}

func ProvideCustomerRepo(cfg *config.Config) *RpcRepo.CustomerRepo {
	rpcClient := RpcClient.NewClient("tcp", cfg.CustomerServiceRPCAddr)
	return RpcRepo.NewCustomerRepo(rpcClient)
}
